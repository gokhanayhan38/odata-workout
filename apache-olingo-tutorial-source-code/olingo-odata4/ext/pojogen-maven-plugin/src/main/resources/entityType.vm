#*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *#
#set( $clsSuffix = ".class" )
package ${package};
//CHECKSTYLE:OFF (Maven checkstyle)
import org.apache.olingo.commons.api.http.HttpMethod;
import org.apache.olingo.ext.proxy.api.annotations.AnnotationsForProperty;
import org.apache.olingo.ext.proxy.api.annotations.AnnotationsForNavigationProperty;
import org.apache.olingo.ext.proxy.api.annotations.Namespace;
import org.apache.olingo.ext.proxy.api.annotations.EntityType;
import org.apache.olingo.ext.proxy.api.annotations.EntitySet;
import org.apache.olingo.ext.proxy.api.annotations.Key;
import org.apache.olingo.ext.proxy.api.annotations.KeyRef;
import org.apache.olingo.ext.proxy.api.annotations.NavigationProperty;
import org.apache.olingo.ext.proxy.api.annotations.Property;
import org.apache.olingo.ext.proxy.api.annotations.Operation;
import org.apache.olingo.ext.proxy.api.annotations.Parameter;
import org.apache.olingo.ext.proxy.api.AbstractOpenType;
import org.apache.olingo.ext.proxy.api.OperationType;
import org.apache.olingo.ext.proxy.api.AbstractEntitySet;
#foreach($ns in $namespaces)
import #if($basePackage)${basePackage}.#end${ns}.*;
#end

import org.apache.olingo.commons.api.edm.geo.Geospatial;
import org.apache.olingo.commons.api.edm.geo.GeospatialCollection;
import org.apache.olingo.commons.api.edm.geo.LineString;
import org.apache.olingo.commons.api.edm.geo.MultiLineString;
import org.apache.olingo.commons.api.edm.geo.MultiPoint;
import org.apache.olingo.commons.api.edm.geo.MultiPolygon;
import org.apache.olingo.commons.api.edm.geo.Point;
import org.apache.olingo.commons.api.edm.geo.Polygon;
import java.util.concurrent.Future;
//CHECKSTYLE:ON (Maven checkstyle)

#if( $keyRef )@KeyRef(${keyRef}.class)#end

@org.apache.olingo.ext.proxy.api.annotations.Namespace("$namespace")
@org.apache.olingo.ext.proxy.api.annotations.EntityType(name = "$entityType.Name",
        openType = $entityType.isOpenType(),
        hasStream = $entityType.hasStream(),
        isAbstract = $entityType.Abstract#if($entityType.getBaseType()),
        baseType = "$entityType.getBaseType().getFullQualifiedName().toString()"#end)
public interface $utility.capitalize($entityType.Name) 
  extends org.apache.olingo.ext.proxy.api.Annotatable,
  #if( $entityType.getBaseType() )$utility.getJavaType($entityType.getBaseType())#{else}org.apache.olingo.ext.proxy.api.EntityType<$utility.capitalize($entityType.Name)>, org.apache.olingo.ext.proxy.api.StructuredQuery<$utility.capitalize($entityType.Name)>#end
  #{if}( $entityType.isOpenType() ),AbstractOpenType#end {

#if( $entityType.getBaseType() )
  @Override
  $utility.capitalize($entityType.Name) load();

  @Override
  Future<? extends $utility.capitalize($entityType.Name)> loadAsync();

  @Override
  $utility.capitalize($entityType.Name) refs();

  @Override
  $utility.capitalize($entityType.Name) expand(String... expand);

  @Override
  $utility.capitalize($entityType.Name) select(String... select);
#end

#set( $keys = [] )
#foreach($key in $entityType.KeyPropertyRefs)
    #if(!$keys.add($key.KeyPropertyName)) #stop #end
#end

#set( $contained = [] )

#foreach($propertyName in $entityType.PropertyNames)
    #set($property = $entityType.getProperty($propertyName))
    #set($fcprops = $utility.getFcProperties($property) )
    #if($keys.contains($property.Name))@Key#end

    #if($property.Type.FullQualifiedName.toString().equals("Edm.Stream"))#*
      *##set( $returnType = "org.apache.olingo.ext.proxy.api.EdmStreamValue" )#*
    *##else#*
      *##set( $returnType = $utility.getJavaType($property.Type, $property.Collection) )#*
    *##end

    @org.apache.olingo.ext.proxy.api.annotations.Property(name = "$property.Name", 
                type = "$property.Type.FullQualifiedName.toString()", 
                nullable = $property.Nullable,
                defaultValue = "#if($property.getDefaultValue())$property.getDefaultValue()#end",
                maxLenght = #if($property.getMaxLength() && !$property.getMaxLength().equalsIgnoreCase("max"))$property.getMaxLength()#{else}Integer.MAX_VALUE#end,
                fixedLenght = #if($property.isFixedLength())$property.isFixedLength()#{else}false#end,
                precision = #if($property.getPrecision())$property.getPrecision()#{else}0#end,
                scale = #if($property.getScale())$property.getScale()#{else}0#end,
                unicode = #if($property.isUnicode())$property.isUnicode()#{else}false#end,
                collation = "#if($property.getCollation())$property.getCollation()#end",
                srid = "#if($property.getSRID())$property.getSRID()#end")
    $returnType get$utility.capitalize($property.Name)();

    void set$utility.capitalize($property.Name)($returnType _$utility.uncapitalize($property.Name));
#end
    
#foreach($propertyName in $entityType.NavigationPropertyNames)
    #set($property = $entityType.getNavigationProperty($propertyName))
    #set($type = $utility.getNavigationType($property))
    #set($binding = $utility.getNavigationBindingDetails($entityType, $property))

    #if($property.containsTarget() && $property.Collection)#*
      *##set( $contains = $contained.add($property) )
    #else#*
      *#@org.apache.olingo.ext.proxy.api.annotations.NavigationProperty(name = "$property.Name", 
                type = "$type", 
                targetSchema = "$binding.Schema.Namespace", 
                targetContainer = "#if($binding.Container)$binding.Container.Name#end", 
                targetEntitySet = "#if($binding.EntitySet)$binding.EntitySet.Name#end",
                containsTarget = $property.containsTarget())
    $utility.getJavaType($type, $property.Collection) get$utility.capitalize($property.Name)();

    void set$utility.capitalize($property.Name)($utility.getJavaType($type, $property.Collection) _$utility.uncapitalize($property.Name));
    #end
#end

#if($entityType.hasStream())
    void uploadStream(org.apache.olingo.ext.proxy.api.EdmStreamValue stream);

    org.apache.olingo.ext.proxy.api.EdmStreamValue loadStream();
#end

#set( $functions = $utility.getFunctionsBoundTo($entityType.Name, false) )
#set( $actions = $utility.getActionsBoundTo($entityType.Name, false) )
#set( $override = $entityType.getBaseType() )
#set($structuredType = $entityType)
#parse( "operation.vm" )

    Annotations annotations();

    interface Annotations #if( $entityType.baseType )
           extends ${utility.getJavaType($entityType.getBaseType())}.Annotations#end{

#foreach($propertyName in $entityType.PropertyNames)
    #set($property = $entityType.getProperty($propertyName))
        @org.apache.olingo.ext.proxy.api.annotations.AnnotationsForProperty(name = "$property.Name",
                   type = "$property.Type.FullQualifiedName.toString()")
        org.apache.olingo.ext.proxy.api.Annotatable get$utility.capitalize($property.Name)Annotations();

#end

#foreach($propertyName in $entityType.NavigationPropertyNames)
    #set($property = $entityType.getNavigationProperty($propertyName))
    #set($type = $utility.getNavigationType($property))

        @org.apache.olingo.ext.proxy.api.annotations.AnnotationsForNavigationProperty(name = "$property.Name", 
                  type = "$type")
        org.apache.olingo.ext.proxy.api.Annotatable get$utility.capitalize($property.Name)Annotations();
#end
    }

#foreach($property in $contained)
  #if( !$entityType.BaseType.getNavigationProperty($property.Name))
    #set( $pkgname = "${package}.${utility.capitalize($entityType.Name)}.$utility.capitalize($property.Name)" )
    @org.apache.olingo.ext.proxy.api.annotations.NavigationProperty(name = "$property.Name", 
                type = "$type", 
                targetSchema = "$binding.Schema.Namespace", 
                targetContainer = "#if($binding.Container)$binding.Container.Name#end", 
                targetEntitySet = "#if($binding.EntitySet)$binding.EntitySet.Name#end",
                containsTarget = $property.containsTarget())
    $pkgname get$utility.capitalize($property.Name)();
    void set$utility.capitalize($property.Name)($pkgname _$utility.uncapitalize($property.Name));

    #set( $keys = $utility.getEntityKeyType($property) )
    #if( $keys.size() > 1 )
      #set( $type = $utility.getEdmType($property).EntityType.Name + "Key" )
    #elseif( $keys.size() == 1 )
      #set( $type = $keys.values().iterator().next() )
    #else
      #set( $type = "" )
    #end

    #set ( $javaEntityType = $utility.getJavaType($property.Type) )

    @org.apache.olingo.ext.proxy.api.annotations.EntitySet(name = "$property.Name", contained = true)
    interface $utility.capitalize($property.Name) 
      extends org.apache.olingo.ext.proxy.api.EntitySet<$javaEntityType, ${javaEntityType}Collection>, 
      org.apache.olingo.ext.proxy.api.StructuredCollectionQuery<$utility.capitalize($property.Name)>,
      AbstractEntitySet<$javaEntityType, $type, ${javaEntityType}Collection> {
    }

  #end
#end
}
